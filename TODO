Planned features / unsolved issues / wishlist items

* Allow an OpenVPN tunnel to provide only partial routing, instead of always
  providing the default route.
  + Request DHCP rfc3442-classless-static-routes and convert to matching
    push requests.
  + Per-realm flag whether or not to push the default route.
  + Pass full_username on to DHCP server as client-identifer, allowing the
    DHCP server to send static routes depending on the full_username.

* Periodically attempt to re-establish OpenVPN management connection after EOF.
  + Without re-establishing the connection, an OpenVPN restart causes the
    connection to be lost.
  + Same probably goes for initial establishing.
  + A single down OpenVPN server instance shouldn't cause odrd to fail, as
    there might be other instances that need to be served.

* Refresh DHCP leases.
  + Track ovpn disconnect events.
  + If lease timeout has been reached, disconnect the client instead of
    attempting to refresh an address. (It's just too late.)
  + Refactor code.

* Try to implement some mechanism to determine if an IP address is already in
  use (especially by non-OpenVPN users).
  + Use ARP resolve / ARP ping to determine whether an IP address is in use.
  + Communicate with other odr instances to determine whether the
    full_username is known as an active client to someone.
  + If IP active, but full_username unknown to odr instances -> non-OpenVPN
    user using the address -> request a different address.
    Otherwise the same full_username is active on several instances -> kill
    it on the older instance.
  + A delay of at least 10 seconds should be inserted after a DHCPDECLINE,
    before requesting a new address (RFC 2131, p.17).

* Release DHCP leases on coordinated disconnect.
  + Probably not possible, because there's no such thing as a coordinated
    disconnect in OpenVPN.

* Send DHCPREQUEST to all servers that were initially contacted.  This tells
  the servers that are not mentioned in the 'server identifier' field of the
  DHCPREQUEST, that the IP addresses they potentially offered may be freed
  again. (Compare with RFC 2131, page 16, section 3.1, points 3 and 4.)
  (This is optional though, as servers must time-out such offers themselves.)
